#!/usr/bin/env python3

from bcc import BPF, PerfType, PerfSWConfig
from time import sleep
import os
import ctypes
import platform

### syscall ###
def extract_system_call_ids(unistd_64_fh):
    syscall_id_to_name = {'running': '[running]', '-1': '[kernel_direct]', 'kernel_thread':'[kernel_thread]'}

    # examples from a unistd.h file
    #  #define __NR_mount 40
    #  #define __NR3264_truncate 45

    for name_prefix in ['__NR_', '__NR3264_']:
        for line in unistd_64_fh.readlines():
            tokens = line.split()
            if tokens and len(tokens) == 3 and tokens[0] == '#define':
                _, s_name, s_id = tokens
                if s_name.startswith(name_prefix):
                    s_name = s_name[len(name_prefix):]
                    syscall_id_to_name[s_id] = s_name

    return syscall_id_to_name

# syscall id to name translation 
def get_system_call_names():
    psn_dir=os.path.dirname(os.path.realpath(__file__))
    kernel_ver=platform.release().split('-')[0]

    # this probably needds to be improved for better platform support
    if platform.machine() == 'aarch64':
        unistd_64_paths = ['/usr/include/asm-generic/unistd.h']
    else:
        unistd_64_paths = [  '/usr/include/asm/unistd_64.h', '/usr/include/x86_64-linux-gnu/asm/unistd_64.h'
                           , '/usr/include/asm-x86_64/unistd.h', '/usr/include/asm/unistd.h'
                           , psn_dir+'/syscall_64_'+kernel_ver+'.h', psn_dir+'/syscall_64.h']
    
    for path in unistd_64_paths:
        try:
            with open(path) as f:
                return extract_system_call_ids(f)
        except IOError as e:
            pass

    raise Exception('unistd_64.h not found in' + ' or '.join(unistd_64_paths) + '.\n' +
                    '           You may need to "yum install kernel-headers" or "apt-get install libc6-dev"\n') 

# syscall lookup table
syscall_id_to_name = get_system_call_names()

TASK_RUNNING           =   0x00000000
TASK_INTERRUPTIBLE     =   0x00000001
TASK_UNINTERRUPTIBLE   =   0x00000002
TASK_STOPPED           =   0x00000004
TASK_TRACED            =   0x00000008

EXIT_DEAD              =   0x00000010
EXIT_ZOMBIE            =   0x00000020
EXIT_TRACE             =   (EXIT_ZOMBIE | EXIT_DEAD)

TASK_PARKED            =   0x00000040
TASK_DEAD              =   0x00000080
TASK_WAKEKILL          =   0x00000100
TASK_WAKING            =   0x00000200
TASK_NOLOAD            =   0x00000400
TASK_NEW               =   0x00000800
TASK_RTLOCK_WAIT       =   0x00001000
TASK_FREEZABLE         =   0x00002000
#__TASK_FREEZABLE_UNSAFE=   (0x00004000 * IS_ENABLED(CONFIG_LOCKDEP))
TASK_FROZEN            =   0x00008000
TASK_STATE_MAX         =   0x00010000

def return_task_state(s):
    if s & TASK_NOLOAD:          return 'I' # kthread idle (usually 0x402)
    if s == TASK_RUNNING:        return 'R'
    if s & TASK_INTERRUPTIBLE:   return 'S'
    if s & TASK_UNINTERRUPTIBLE: return 'D'
    if s & TASK_STOPPED:         return 'T'
    if s & TASK_TRACED:          return 't'
    # TODO add other states too
    return '{:x}'.format(s)

with open('xcapture.bcc', 'r') as file:
    bpf_text = file.read()

b = BPF(text=bpf_text)

# b.attach_kprobe(event="schedule", fn_name="update_offcpu_schedule")
# b.attach_kprobe(event_re="finish_task_switch.*", fn_name="update_offcpu_finish_task_switch")

# Software CPU_CLOCK is useful in cloud & VM environments where perf hardware events are not available,
# but software clocks often don't measure what happens when CPUs are in critical sections when most interrupts are disabled
b.attach_perf_event(ev_type=PerfType.SOFTWARE, ev_config=PerfSWConfig.CPU_CLOCK, fn_name="update_cpu_stack_profile", sample_freq=1)


# get own pid so to not display it in output
mypid = os.getpid()
print(f"mypid={mypid}")

# start sampling the Thread State Array
print("Working...")                 
tsa = b.get_table("tsa")

while True:
    sleep(1)

    # map of stack_ids seen 
    output_kstack = {}
    output_ustack = {}

    # print header
    out = "\n"
    i = tsa.items()[0]

    for f in i[1]._fields_:
        fieldname = f[0]
        if fieldname[0:5] != "__pad":
            value = getattr(i[1], fieldname, '-')
            if isinstance(value, bytes):
                out += "%-20s " % fieldname.upper()
            else:
                out += "%-18s " % fieldname.upper()

    print(out)
 
    # print data
    for i in tsa.items(): 

        out = ""
        for f in i[1]._fields_:
            fieldname = f[0]
            if fieldname[0:5] != "__pad":
                value = getattr(i[1], fieldname, '-')
                    
                if fieldname == "state":
                    state = return_task_state(int(value))
                    if state in ['R','D']:
                        out += "%-1s %-17x" % (state, int(value))
                    else:
                        break
                elif isinstance(value, bytes):
                    out += "%-20s " % (str(value, 'utf-8'))
                else:
                    if fieldname == "syscall_id":
                        if getattr(i[1], "syscall_set"):
                            out += "%-19s" % syscall_id_to_name.get(str(value), '-')
                        else:
                            out += "%-19s" % '-'
                    else:
                        if abs(value) >= 2**31-1:
                            out += "0x%-16x " % (value)
                        else:
                            out += "%-16d   " % (value)
                    
                    if fieldname.endswith("_kstack"):
                        output_kstack[value] = True

                    # this is used in a later iteration for _ustack fields below
                    if fieldname == "pid":
                        pid = value

                    if fieldname.endswith("_ustack"):
                        # stackid, pid
                        output_ustack[value, pid] = True

        if state in ['R','D']: print(out)

    # print stack traces
    class Data(ctypes.Structure):
        _fields_ = [
            ("stack_id", ctypes.c_int),
            ("pid", ctypes.c_ulong),
        ]

    kstack_traces = b.get_table("kstackmap")
    exclusions = ['entry_SYSCALL_64_after_hwframe', 'do_syscall_64', 'x64_sys_call', 'ret_from_fork_asm', 'ret_from_fork']

    print()
    ustack_traces = b.get_table("ustackmap")

    for stack_id, pid in output_ustack:
        if stack_id > 0:
            print(f"ustack {stack_id:7} ", end="")
            stack = list(ustack_traces.walk(stack_id))
            line = ""
            for addr in reversed(stack):
                func = b.sym(addr, pid).decode('utf-8', 'replace')
                line += "->" + (func if func != '[unknown]' else '{:x}'.format(addr))

            print(line)
 
    print()
    for k, v in kstack_traces.items():
        stack_id = k.value
        if stack_id in output_kstack:
            print(f"kstack {stack_id:7} ", end="")
            if stack_id >= 0:
                stack = list(kstack_traces.walk(stack_id))
                line = ""
                for addr in reversed(stack):
                    func = b.ksym(addr).decode('utf-8', 'replace')
                    if func not in exclusions:
                        line += "->" + b.ksym(addr).decode('utf-8', 'replace')

                print(line)

# That's all, folks!
